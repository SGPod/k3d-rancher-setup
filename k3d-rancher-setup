#!/usr/bin/env bash
set -e
set -o pipefail

readonly tools_list="k3d kubectl helm realpath"

_usage_tools() {
  echo "USAGE: you need the following tools installed and on your PATH: ${tools_list}"
  exit 1
}

### Validate if all necessary tools are installed
for tool in ${tools_list}; do
  command -v ${tool} &>/dev/null || _usage_tools
done

### Set our base config
readonly cluster_name=${K3D_CLUSTER_NAME:-mycluster}
readonly cluster_servers=${K3D_CLUSTER_SERVERS:-1}
readonly cluster_agents=${K3D_CLUSTER_AGENTS:-3}
readonly cluster_agent_volume=${K3D_AGENT_VOLUME:-./agent-volume}
readonly cluster_setup_registry=${K3D_SETUP_REGISTRY:-0}
readonly cluster_setup_rancher=${K3D_SETUP_RANCHER:-0}
readonly kubeconfig_dir=${KUBECONFIG_DIR:-./kubeconfig}
readonly cert_manager_version="v1.3.1"

### this function takes a TCP port as an argument and will check if it's
### free to allocate. If not, it will auto increment until it finds a port
### that can be used. Finally it will output the port number
_allocate_free_port() {
  local bind_port=$1
  while netstat -an -f inet | grep -i listen | grep "\.${bind_port}" &> /dev/null; do
    let bind_port+=1
  done

  echo ${bind_port}
}

readonly cluster_api_port=$(_allocate_free_port 6550)
readonly cluster_lb_http_port=$(_allocate_free_port ${K3D_LB_HTTP_PORT:-80})
readonly cluster_lb_https_port=$(_allocate_free_port ${K3D_LB_HTTPS_PORT:-443})

echo "
K3D Setup
=========
The following values have been configured:

Cluster Name                  : ${cluster_name}
# of Server Nodes             : ${cluster_servers}
# of Agent Nodes              : ${cluster_agents}
Cluster Agent Volume Path     : ${cluster_agent_volume}
Configure Registry in Cluster : ${cluster_setup_registry}
Configure Rancher in Cluster  : ${cluster_setup_rancher}
Cluster API port              : ${cluster_api_port}
Load Balancer HTTP port       : ${cluster_lb_http_port}
Load Balancer HTTPS port      : ${cluster_lb_https_port}
Kubeconfig Path               : ${kubeconfig_dir}/${cluster_name}
"

### If not in handsfree mode, let the user know what's about to happen..
if [[ ${K3D_HANDSFREE} -ne 1 ]]; then
  # Ask for confirmation before nuking pods
  read -p "Do you want to create a K3D cluster with the settings above? (y/N) " -n 1 -r
  echo ""

  # Abort if reply is NOT 'y'
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Aborting.."
    exit 1
  fi
fi

### Define whether or not to create a registry
if [[ ${cluster_setup_registry} -eq 1 ]]; then
  registry_args="--registry-create"
else
  registry_args=""
fi

### Build a cluster!
k3d cluster create ${cluster_name} \
  --api-port ${cluster_api_port} \
  --servers ${cluster_servers} \
  --agents ${cluster_agents} \
  --port ${cluster_lb_http_port}:80@loadbalancer \
  --port ${cluster_lb_https_port}:443@loadbalancer \
  --wait \
  --kubeconfig-update-default=false \
  --k3s-server-arg="--no-deploy=traefik" \
  -v $(realpath ./config/helm-ingress-nginx.yaml):/var/lib/rancher/k3s/server/manifests/helm-ingress-nginx.yaml \
  -v $(realpath ${cluster_agent_volume}):/data/agent-volume \
  ${registry_args}

k3d cluster list

### Create our Kubeconfig. We'll need that to interact with the cluster
KUBECONFIG_FILE="$(realpath ${kubeconfig_dir}/${cluster_name})"
k3d kubeconfig get ${cluster_name} > $KUBECONFIG_FILE
export KUBECONFIG=$KUBECONFIG_FILE
chmod 600 $KUBECONFIG_FILE
kubectl get nodes

### Add some Helm repos, and make sure we install cert-manager for HTTPS support
helm repo add rancher-latest https://releases.rancher.com/server-charts/latest
kubectl create namespace cattle-system
kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/${cert_manager_version}/cert-manager.crds.yaml
kubectl create namespace cert-manager
helm repo add jetstack https://charts.jetstack.io
helm repo update

helm install \
  cert-manager jetstack/cert-manager \
  --namespace cert-manager \
  --version ${cert_manager_version} --wait
kubectl -n cert-manager rollout status deploy/cert-manager

if [[ ${cluster_setup_rancher} -eq 1 ]]; then
  helm install rancher rancher-latest/rancher \
    --namespace cattle-system \
    --set hostname=rancher.k3d.localhost --wait
  kubectl -n cattle-system rollout status deploy/rancher
fi

echo "All Done! You can use the cluster by running the following command:

export KUBECONFIG=$KUBECONFIG_FILE"
